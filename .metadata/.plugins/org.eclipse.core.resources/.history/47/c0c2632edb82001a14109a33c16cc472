package basic;


/*
	멀티쓰레드 프로그래밍 사용 방법
	1. Thread클래스를 상속
	2. run메소드를 오버라이딩
		=> 쓰레드 프로그래밍으로 작업하고 싶은 내용을 구현
		=>동시다발로 표현하고 싶은 내용 구현
	3. Thread 클래스의 (Thread의 하위클래스) start 메서드를 호출
		=> 동시작업 시작
		=> run을 직접 호출하지 않고 start 메소드를 호추랗면 JVM이 실행할 수 있는 상태가 
		되면 자동으로 Thread 클래스의 run 메소드를 호출한다.
*/
class ThreadDemo1 extends Thread{
	public ThreadDemo1(String name) {
		super(name);
	}
	//1~20까지 0.5초 간격으로 출력
	public void run() {
		for(int i=1;i<=20;i++) {
			System.out.print(i+"("+getName()+")");
			try {
				Thread.sleep(500); // 실행흐름을 멈춘다
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
			if(i%5==0) {
				System.out.println();
			}
		}
	}
	
}
//ThreadDemo01 객체를 활용하여 멀티쓰레드 프로그래밍 구현
public class ThreadTest01 {

	public static void main(String[] args) {
		System.out.println("*******프로그램 시작********");
		ThreadDemo1 t1 = new ThreadDemo1("t1");
		ThreadDemo1 t2 = new ThreadDemo1("t2");
		//t1.run(); 단순한 메소드 호출 (쓰레드 프로그래밍을 할 수 없다.)
		t1.start();
		t2.start();
		
		
		System.out.println("작업중......");
		//메인출력
		for (int i = 65; i <= 89; i++) {
			System.out.println((char)i);
			try {
				Thread.sleep(200); // 실행흐름을 멈춘다
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}

	}

}

